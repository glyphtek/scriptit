{"version":3,"file":"vitepress___@vueuse_integrations_useFocusTrap.js","names":["isInert","isContentEditable","getCandidates","getCandidatesIteratively","hasTabIndex","getTabIndex","getSortOrderTabIndex","sortOrderedTabbables","isInput","isHiddenInput","isDetailsWithSummary","getCheckedRadio","isTabbableRadio","queryRadios","isRadio","isNonTabbableRadio","isNodeAttached","isZeroArea","isHidden","isDisabledFromFieldset","isNodeMatchingSelectorFocusable","isNodeMatchingSelectorTabbable","isValidShadowRootTabbable","sortByOrder","tabbable","focusable","isTabbable","isFocusable","r","isSelectableInput","isEscapeEvent","isTabEvent","isKeyForward","isKeyBackward","delay","valueOrHandler","getActualTarget","createFocusTrap","getOption","findContainerIndex","getNodeForOption","getInitialFocusNode","updateTabbableNodes","getReturnFocusNode","findNextNavNode","checkPointerDown","checkFocusIn","checkKeyNav","checkTabKey","checkEscapeKey","checkClick","addListeners","removeListeners","checkDomRemoval","updateObservedNodes","finishActivation","finishDeactivation"],"sources":["../../../../node_modules/tabbable/dist/index.esm.js","../../../../node_modules/focus-trap/dist/focus-trap.esm.js","../../../../node_modules/@vueuse/integrations/useFocusTrap.mjs"],"sourcesContent":["/*!\n* tabbable 6.2.0\n* @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE\n*/\n// NOTE: separate `:not()` selectors has broader browser support than the newer\n//  `:not([inert], [inert] *)` (Feb 2023)\n// CAREFUL: JSDom does not support `:not([inert] *)` as a selector; using it causes\n//  the entire query to fail, resulting in no nodes found, which will break a lot\n//  of things... so we have to rely on JS to identify nodes inside an inert container\nvar candidateSelectors = ['input:not([inert])', 'select:not([inert])', 'textarea:not([inert])', 'a[href]:not([inert])', 'button:not([inert])', '[tabindex]:not(slot):not([inert])', 'audio[controls]:not([inert])', 'video[controls]:not([inert])', '[contenteditable]:not([contenteditable=\"false\"]):not([inert])', 'details>summary:first-of-type:not([inert])', 'details:not([inert])'];\nvar candidateSelector = /* #__PURE__ */candidateSelectors.join(',');\nvar NoElement = typeof Element === 'undefined';\nvar matches = NoElement ? function () {} : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;\nvar getRootNode = !NoElement && Element.prototype.getRootNode ? function (element) {\n  var _element$getRootNode;\n  return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);\n} : function (element) {\n  return element === null || element === void 0 ? void 0 : element.ownerDocument;\n};\n\n/**\n * Determines if a node is inert or in an inert ancestor.\n * @param {Element} [node]\n * @param {boolean} [lookUp] If true and `node` is not inert, looks up at ancestors to\n *  see if any of them are inert. If false, only `node` itself is considered.\n * @returns {boolean} True if inert itself or by way of being in an inert ancestor.\n *  False if `node` is falsy.\n */\nvar isInert = function isInert(node, lookUp) {\n  var _node$getAttribute;\n  if (lookUp === void 0) {\n    lookUp = true;\n  }\n  // CAREFUL: JSDom does not support inert at all, so we can't use the `HTMLElement.inert`\n  //  JS API property; we have to check the attribute, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's an active element\n  var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, 'inert');\n  var inert = inertAtt === '' || inertAtt === 'true';\n\n  // NOTE: this could also be handled with `node.matches('[inert], :is([inert] *)')`\n  //  if it weren't for `matches()` not being a function on shadow roots; the following\n  //  code works for any kind of node\n  // CAREFUL: JSDom does not appear to support certain selectors like `:not([inert] *)`\n  //  so it likely would not support `:is([inert] *)` either...\n  var result = inert || lookUp && node && isInert(node.parentNode); // recursive\n\n  return result;\n};\n\n/**\n * Determines if a node's content is editable.\n * @param {Element} [node]\n * @returns True if it's content-editable; false if it's not or `node` is falsy.\n */\nvar isContentEditable = function isContentEditable(node) {\n  var _node$getAttribute2;\n  // CAREFUL: JSDom does not support the `HTMLElement.isContentEditable` API so we have\n  //  to use the attribute directly to check for this, which can either be empty or 'true';\n  //  if it's `null` (not specified) or 'false', it's a non-editable element\n  var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, 'contenteditable');\n  return attValue === '' || attValue === 'true';\n};\n\n/**\n * @param {Element} el container to check in\n * @param {boolean} includeContainer add container to check\n * @param {(node: Element) => boolean} filter filter candidates\n * @returns {Element[]}\n */\nvar getCandidates = function getCandidates(el, includeContainer, filter) {\n  // even if `includeContainer=false`, we still have to check it for inertness because\n  //  if it's inert, all its children are inert\n  if (isInert(el)) {\n    return [];\n  }\n  var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));\n  if (includeContainer && matches.call(el, candidateSelector)) {\n    candidates.unshift(el);\n  }\n  candidates = candidates.filter(filter);\n  return candidates;\n};\n\n/**\n * @callback GetShadowRoot\n * @param {Element} element to check for shadow root\n * @returns {ShadowRoot|boolean} ShadowRoot if available or boolean indicating if a shadowRoot is attached but not available.\n */\n\n/**\n * @callback ShadowRootFilter\n * @param {Element} shadowHostNode the element which contains shadow content\n * @returns {boolean} true if a shadow root could potentially contain valid candidates.\n */\n\n/**\n * @typedef {Object} CandidateScope\n * @property {Element} scopeParent contains inner candidates\n * @property {Element[]} candidates list of candidates found in the scope parent\n */\n\n/**\n * @typedef {Object} IterativeOptions\n * @property {GetShadowRoot|boolean} getShadowRoot true if shadow support is enabled; falsy if not;\n *  if a function, implies shadow support is enabled and either returns the shadow root of an element\n *  or a boolean stating if it has an undisclosed shadow root\n * @property {(node: Element) => boolean} filter filter candidates\n * @property {boolean} flatten if true then result will flatten any CandidateScope into the returned list\n * @property {ShadowRootFilter} shadowRootFilter filter shadow roots;\n */\n\n/**\n * @param {Element[]} elements list of element containers to match candidates from\n * @param {boolean} includeContainer add container list to check\n * @param {IterativeOptions} options\n * @returns {Array.<Element|CandidateScope>}\n */\nvar getCandidatesIteratively = function getCandidatesIteratively(elements, includeContainer, options) {\n  var candidates = [];\n  var elementsToCheck = Array.from(elements);\n  while (elementsToCheck.length) {\n    var element = elementsToCheck.shift();\n    if (isInert(element, false)) {\n      // no need to look up since we're drilling down\n      // anything inside this container will also be inert\n      continue;\n    }\n    if (element.tagName === 'SLOT') {\n      // add shadow dom slot scope (slot itself cannot be focusable)\n      var assigned = element.assignedElements();\n      var content = assigned.length ? assigned : element.children;\n      var nestedCandidates = getCandidatesIteratively(content, true, options);\n      if (options.flatten) {\n        candidates.push.apply(candidates, nestedCandidates);\n      } else {\n        candidates.push({\n          scopeParent: element,\n          candidates: nestedCandidates\n        });\n      }\n    } else {\n      // check candidate element\n      var validCandidate = matches.call(element, candidateSelector);\n      if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {\n        candidates.push(element);\n      }\n\n      // iterate over shadow content if possible\n      var shadowRoot = element.shadowRoot ||\n      // check for an undisclosed shadow\n      typeof options.getShadowRoot === 'function' && options.getShadowRoot(element);\n\n      // no inert look up because we're already drilling down and checking for inertness\n      //  on the way down, so all containers to this root node should have already been\n      //  vetted as non-inert\n      var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));\n      if (shadowRoot && validShadowRoot) {\n        // add shadow dom scope IIF a shadow root node was given; otherwise, an undisclosed\n        //  shadow exists, so look at light dom children as fallback BUT create a scope for any\n        //  child candidates found because they're likely slotted elements (elements that are\n        //  children of the web component element (which has the shadow), in the light dom, but\n        //  slotted somewhere _inside_ the undisclosed shadow) -- the scope is created below,\n        //  _after_ we return from this recursive call\n        var _nestedCandidates = getCandidatesIteratively(shadowRoot === true ? element.children : shadowRoot.children, true, options);\n        if (options.flatten) {\n          candidates.push.apply(candidates, _nestedCandidates);\n        } else {\n          candidates.push({\n            scopeParent: element,\n            candidates: _nestedCandidates\n          });\n        }\n      } else {\n        // there's not shadow so just dig into the element's (light dom) children\n        //  __without__ giving the element special scope treatment\n        elementsToCheck.unshift.apply(elementsToCheck, element.children);\n      }\n    }\n  }\n  return candidates;\n};\n\n/**\n * @private\n * Determines if the node has an explicitly specified `tabindex` attribute.\n * @param {HTMLElement} node\n * @returns {boolean} True if so; false if not.\n */\nvar hasTabIndex = function hasTabIndex(node) {\n  return !isNaN(parseInt(node.getAttribute('tabindex'), 10));\n};\n\n/**\n * Determine the tab index of a given node.\n * @param {HTMLElement} node\n * @returns {number} Tab order (negative, 0, or positive number).\n * @throws {Error} If `node` is falsy.\n */\nvar getTabIndex = function getTabIndex(node) {\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (node.tabIndex < 0) {\n    // in Chrome, <details/>, <audio controls/> and <video controls/> elements get a default\n    // `tabIndex` of -1 when the 'tabindex' attribute isn't specified in the DOM,\n    // yet they are still part of the regular tab order; in FF, they get a default\n    // `tabIndex` of 0; since Chrome still puts those elements in the regular tab\n    // order, consider their tab index to be 0.\n    // Also browsers do not return `tabIndex` correctly for contentEditable nodes;\n    // so if they don't have a tabindex attribute specifically set, assume it's 0.\n    if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {\n      return 0;\n    }\n  }\n  return node.tabIndex;\n};\n\n/**\n * Determine the tab index of a given node __for sort order purposes__.\n * @param {HTMLElement} node\n * @param {boolean} [isScope] True for a custom element with shadow root or slot that, by default,\n *  has tabIndex -1, but needs to be sorted by document order in order for its content to be\n *  inserted into the correct sort position.\n * @returns {number} Tab order (negative, 0, or positive number).\n */\nvar getSortOrderTabIndex = function getSortOrderTabIndex(node, isScope) {\n  var tabIndex = getTabIndex(node);\n  if (tabIndex < 0 && isScope && !hasTabIndex(node)) {\n    return 0;\n  }\n  return tabIndex;\n};\nvar sortOrderedTabbables = function sortOrderedTabbables(a, b) {\n  return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;\n};\nvar isInput = function isInput(node) {\n  return node.tagName === 'INPUT';\n};\nvar isHiddenInput = function isHiddenInput(node) {\n  return isInput(node) && node.type === 'hidden';\n};\nvar isDetailsWithSummary = function isDetailsWithSummary(node) {\n  var r = node.tagName === 'DETAILS' && Array.prototype.slice.apply(node.children).some(function (child) {\n    return child.tagName === 'SUMMARY';\n  });\n  return r;\n};\nvar getCheckedRadio = function getCheckedRadio(nodes, form) {\n  for (var i = 0; i < nodes.length; i++) {\n    if (nodes[i].checked && nodes[i].form === form) {\n      return nodes[i];\n    }\n  }\n};\nvar isTabbableRadio = function isTabbableRadio(node) {\n  if (!node.name) {\n    return true;\n  }\n  var radioScope = node.form || getRootNode(node);\n  var queryRadios = function queryRadios(name) {\n    return radioScope.querySelectorAll('input[type=\"radio\"][name=\"' + name + '\"]');\n  };\n  var radioSet;\n  if (typeof window !== 'undefined' && typeof window.CSS !== 'undefined' && typeof window.CSS.escape === 'function') {\n    radioSet = queryRadios(window.CSS.escape(node.name));\n  } else {\n    try {\n      radioSet = queryRadios(node.name);\n    } catch (err) {\n      // eslint-disable-next-line no-console\n      console.error('Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s', err.message);\n      return false;\n    }\n  }\n  var checked = getCheckedRadio(radioSet, node.form);\n  return !checked || checked === node;\n};\nvar isRadio = function isRadio(node) {\n  return isInput(node) && node.type === 'radio';\n};\nvar isNonTabbableRadio = function isNonTabbableRadio(node) {\n  return isRadio(node) && !isTabbableRadio(node);\n};\n\n// determines if a node is ultimately attached to the window's document\nvar isNodeAttached = function isNodeAttached(node) {\n  var _nodeRoot;\n  // The root node is the shadow root if the node is in a shadow DOM; some document otherwise\n  //  (but NOT _the_ document; see second 'If' comment below for more).\n  // If rootNode is shadow root, it'll have a host, which is the element to which the shadow\n  //  is attached, and the one we need to check if it's in the document or not (because the\n  //  shadow, and all nodes it contains, is never considered in the document since shadows\n  //  behave like self-contained DOMs; but if the shadow's HOST, which is part of the document,\n  //  is hidden, or is not in the document itself but is detached, it will affect the shadow's\n  //  visibility, including all the nodes it contains). The host could be any normal node,\n  //  or a custom element (i.e. web component). Either way, that's the one that is considered\n  //  part of the document, not the shadow root, nor any of its children (i.e. the node being\n  //  tested).\n  // To further complicate things, we have to look all the way up until we find a shadow HOST\n  //  that is attached (or find none) because the node might be in nested shadows...\n  // If rootNode is not a shadow root, it won't have a host, and so rootNode should be the\n  //  document (per the docs) and while it's a Document-type object, that document does not\n  //  appear to be the same as the node's `ownerDocument` for some reason, so it's safer\n  //  to ignore the rootNode at this point, and use `node.ownerDocument`. Otherwise,\n  //  using `rootNode.contains(node)` will _always_ be true we'll get false-positives when\n  //  node is actually detached.\n  // NOTE: If `nodeRootHost` or `node` happens to be the `document` itself (which is possible\n  //  if a tabbable/focusable node was quickly added to the DOM, focused, and then removed\n  //  from the DOM as in https://github.com/focus-trap/focus-trap-react/issues/905), then\n  //  `ownerDocument` will be `null`, hence the optional chaining on it.\n  var nodeRoot = node && getRootNode(node);\n  var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;\n\n  // in some cases, a detached node will return itself as the root instead of a document or\n  //  shadow root object, in which case, we shouldn't try to look further up the host chain\n  var attached = false;\n  if (nodeRoot && nodeRoot !== node) {\n    var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;\n    attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));\n    while (!attached && nodeRootHost) {\n      var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;\n      // since it's not attached and we have a root host, the node MUST be in a nested shadow DOM,\n      //  which means we need to get the host's host and check if that parent host is contained\n      //  in (i.e. attached to) the document\n      nodeRoot = getRootNode(nodeRootHost);\n      nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;\n      attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));\n    }\n  }\n  return attached;\n};\nvar isZeroArea = function isZeroArea(node) {\n  var _node$getBoundingClie = node.getBoundingClientRect(),\n    width = _node$getBoundingClie.width,\n    height = _node$getBoundingClie.height;\n  return width === 0 && height === 0;\n};\nvar isHidden = function isHidden(node, _ref) {\n  var displayCheck = _ref.displayCheck,\n    getShadowRoot = _ref.getShadowRoot;\n  // NOTE: visibility will be `undefined` if node is detached from the document\n  //  (see notes about this further down), which means we will consider it visible\n  //  (this is legacy behavior from a very long way back)\n  // NOTE: we check this regardless of `displayCheck=\"none\"` because this is a\n  //  _visibility_ check, not a _display_ check\n  if (getComputedStyle(node).visibility === 'hidden') {\n    return true;\n  }\n  var isDirectSummary = matches.call(node, 'details>summary:first-of-type');\n  var nodeUnderDetails = isDirectSummary ? node.parentElement : node;\n  if (matches.call(nodeUnderDetails, 'details:not([open]) *')) {\n    return true;\n  }\n  if (!displayCheck || displayCheck === 'full' || displayCheck === 'legacy-full') {\n    if (typeof getShadowRoot === 'function') {\n      // figure out if we should consider the node to be in an undisclosed shadow and use the\n      //  'non-zero-area' fallback\n      var originalNode = node;\n      while (node) {\n        var parentElement = node.parentElement;\n        var rootNode = getRootNode(node);\n        if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true // check if there's an undisclosed shadow\n        ) {\n          // node has an undisclosed shadow which means we can only treat it as a black box, so we\n          //  fall back to a non-zero-area test\n          return isZeroArea(node);\n        } else if (node.assignedSlot) {\n          // iterate up slot\n          node = node.assignedSlot;\n        } else if (!parentElement && rootNode !== node.ownerDocument) {\n          // cross shadow boundary\n          node = rootNode.host;\n        } else {\n          // iterate up normal dom\n          node = parentElement;\n        }\n      }\n      node = originalNode;\n    }\n    // else, `getShadowRoot` might be true, but all that does is enable shadow DOM support\n    //  (i.e. it does not also presume that all nodes might have undisclosed shadows); or\n    //  it might be a falsy value, which means shadow DOM support is disabled\n\n    // Since we didn't find it sitting in an undisclosed shadow (or shadows are disabled)\n    //  now we can just test to see if it would normally be visible or not, provided it's\n    //  attached to the main document.\n    // NOTE: We must consider case where node is inside a shadow DOM and given directly to\n    //  `isTabbable()` or `isFocusable()` -- regardless of `getShadowRoot` option setting.\n\n    if (isNodeAttached(node)) {\n      // this works wherever the node is: if there's at least one client rect, it's\n      //  somehow displayed; it also covers the CSS 'display: contents' case where the\n      //  node itself is hidden in place of its contents; and there's no need to search\n      //  up the hierarchy either\n      return !node.getClientRects().length;\n    }\n\n    // Else, the node isn't attached to the document, which means the `getClientRects()`\n    //  API will __always__ return zero rects (this can happen, for example, if React\n    //  is used to render nodes onto a detached tree, as confirmed in this thread:\n    //  https://github.com/facebook/react/issues/9117#issuecomment-284228870)\n    //\n    // It also means that even window.getComputedStyle(node).display will return `undefined`\n    //  because styles are only computed for nodes that are in the document.\n    //\n    // NOTE: THIS HAS BEEN THE CASE FOR YEARS. It is not new, nor is it caused by tabbable\n    //  somehow. Though it was never stated officially, anyone who has ever used tabbable\n    //  APIs on nodes in detached containers has actually implicitly used tabbable in what\n    //  was later (as of v5.2.0 on Apr 9, 2021) called `displayCheck=\"none\"` mode -- essentially\n    //  considering __everything__ to be visible because of the innability to determine styles.\n    //\n    // v6.0.0: As of this major release, the default 'full' option __no longer treats detached\n    //  nodes as visible with the 'none' fallback.__\n    if (displayCheck !== 'legacy-full') {\n      return true; // hidden\n    }\n    // else, fallback to 'none' mode and consider the node visible\n  } else if (displayCheck === 'non-zero-area') {\n    // NOTE: Even though this tests that the node's client rect is non-zero to determine\n    //  whether it's displayed, and that a detached node will __always__ have a zero-area\n    //  client rect, we don't special-case for whether the node is attached or not. In\n    //  this mode, we do want to consider nodes that have a zero area to be hidden at all\n    //  times, and that includes attached or not.\n    return isZeroArea(node);\n  }\n\n  // visible, as far as we can tell, or per current `displayCheck=none` mode, we assume\n  //  it's visible\n  return false;\n};\n\n// form fields (nested) inside a disabled fieldset are not focusable/tabbable\n//  unless they are in the _first_ <legend> element of the top-most disabled\n//  fieldset\nvar isDisabledFromFieldset = function isDisabledFromFieldset(node) {\n  if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {\n    var parentNode = node.parentElement;\n    // check if `node` is contained in a disabled <fieldset>\n    while (parentNode) {\n      if (parentNode.tagName === 'FIELDSET' && parentNode.disabled) {\n        // look for the first <legend> among the children of the disabled <fieldset>\n        for (var i = 0; i < parentNode.children.length; i++) {\n          var child = parentNode.children.item(i);\n          // when the first <legend> (in document order) is found\n          if (child.tagName === 'LEGEND') {\n            // if its parent <fieldset> is not nested in another disabled <fieldset>,\n            // return whether `node` is a descendant of its first <legend>\n            return matches.call(parentNode, 'fieldset[disabled] *') ? true : !child.contains(node);\n          }\n        }\n        // the disabled <fieldset> containing `node` has no <legend>\n        return true;\n      }\n      parentNode = parentNode.parentElement;\n    }\n  }\n\n  // else, node's tabbable/focusable state should not be affected by a fieldset's\n  //  enabled/disabled state\n  return false;\n};\nvar isNodeMatchingSelectorFocusable = function isNodeMatchingSelectorFocusable(options, node) {\n  if (node.disabled ||\n  // we must do an inert look up to filter out any elements inside an inert ancestor\n  //  because we're limited in the type of selectors we can use in JSDom (see related\n  //  note related to `candidateSelectors`)\n  isInert(node) || isHiddenInput(node) || isHidden(node, options) ||\n  // For a details element with a summary, the summary element gets the focus\n  isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {\n    return false;\n  }\n  return true;\n};\nvar isNodeMatchingSelectorTabbable = function isNodeMatchingSelectorTabbable(options, node) {\n  if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {\n    return false;\n  }\n  return true;\n};\nvar isValidShadowRootTabbable = function isValidShadowRootTabbable(shadowHostNode) {\n  var tabIndex = parseInt(shadowHostNode.getAttribute('tabindex'), 10);\n  if (isNaN(tabIndex) || tabIndex >= 0) {\n    return true;\n  }\n  // If a custom element has an explicit negative tabindex,\n  // browsers will not allow tab targeting said element's children.\n  return false;\n};\n\n/**\n * @param {Array.<Element|CandidateScope>} candidates\n * @returns Element[]\n */\nvar sortByOrder = function sortByOrder(candidates) {\n  var regularTabbables = [];\n  var orderedTabbables = [];\n  candidates.forEach(function (item, i) {\n    var isScope = !!item.scopeParent;\n    var element = isScope ? item.scopeParent : item;\n    var candidateTabindex = getSortOrderTabIndex(element, isScope);\n    var elements = isScope ? sortByOrder(item.candidates) : element;\n    if (candidateTabindex === 0) {\n      isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);\n    } else {\n      orderedTabbables.push({\n        documentOrder: i,\n        tabIndex: candidateTabindex,\n        item: item,\n        isScope: isScope,\n        content: elements\n      });\n    }\n  });\n  return orderedTabbables.sort(sortOrderedTabbables).reduce(function (acc, sortable) {\n    sortable.isScope ? acc.push.apply(acc, sortable.content) : acc.push(sortable.content);\n    return acc;\n  }, []).concat(regularTabbables);\n};\nvar tabbable = function tabbable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorTabbable.bind(null, options),\n      flatten: false,\n      getShadowRoot: options.getShadowRoot,\n      shadowRootFilter: isValidShadowRootTabbable\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));\n  }\n  return sortByOrder(candidates);\n};\nvar focusable = function focusable(container, options) {\n  options = options || {};\n  var candidates;\n  if (options.getShadowRoot) {\n    candidates = getCandidatesIteratively([container], options.includeContainer, {\n      filter: isNodeMatchingSelectorFocusable.bind(null, options),\n      flatten: true,\n      getShadowRoot: options.getShadowRoot\n    });\n  } else {\n    candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));\n  }\n  return candidates;\n};\nvar isTabbable = function isTabbable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, candidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorTabbable(options, node);\n};\nvar focusableCandidateSelector = /* #__PURE__ */candidateSelectors.concat('iframe').join(',');\nvar isFocusable = function isFocusable(node, options) {\n  options = options || {};\n  if (!node) {\n    throw new Error('No node provided');\n  }\n  if (matches.call(node, focusableCandidateSelector) === false) {\n    return false;\n  }\n  return isNodeMatchingSelectorFocusable(options, node);\n};\n\nexport { focusable, getTabIndex, isFocusable, isTabbable, tabbable };\n//# sourceMappingURL=index.esm.js.map\n","/*!\n* focus-trap 7.6.5\n* @license MIT, https://github.com/focus-trap/focus-trap/blob/master/LICENSE\n*/\nimport { tabbable, focusable, isTabbable, getTabIndex, isFocusable } from 'tabbable';\n\nfunction _arrayLikeToArray(r, a) {\n  (null == a || a > r.length) && (a = r.length);\n  for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e];\n  return n;\n}\nfunction _arrayWithoutHoles(r) {\n  if (Array.isArray(r)) return _arrayLikeToArray(r);\n}\nfunction _defineProperty(e, r, t) {\n  return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n    value: t,\n    enumerable: true,\n    configurable: true,\n    writable: true\n  }) : e[r] = t, e;\n}\nfunction _iterableToArray(r) {\n  if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r);\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread2(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), true).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nfunction _toConsumableArray(r) {\n  return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread();\n}\nfunction _toPrimitive(t, r) {\n  if (\"object\" != typeof t || !t) return t;\n  var e = t[Symbol.toPrimitive];\n  if (void 0 !== e) {\n    var i = e.call(t, r);\n    if (\"object\" != typeof i) return i;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (\"string\" === r ? String : Number)(t);\n}\nfunction _toPropertyKey(t) {\n  var i = _toPrimitive(t, \"string\");\n  return \"symbol\" == typeof i ? i : i + \"\";\n}\nfunction _unsupportedIterableToArray(r, a) {\n  if (r) {\n    if (\"string\" == typeof r) return _arrayLikeToArray(r, a);\n    var t = {}.toString.call(r).slice(8, -1);\n    return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0;\n  }\n}\n\nvar activeFocusTraps = {\n  activateTrap: function activateTrap(trapStack, trap) {\n    if (trapStack.length > 0) {\n      var activeTrap = trapStack[trapStack.length - 1];\n      if (activeTrap !== trap) {\n        activeTrap._setPausedState(true);\n      }\n    }\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex === -1) {\n      trapStack.push(trap);\n    } else {\n      // move this existing trap to the front of the queue\n      trapStack.splice(trapIndex, 1);\n      trapStack.push(trap);\n    }\n  },\n  deactivateTrap: function deactivateTrap(trapStack, trap) {\n    var trapIndex = trapStack.indexOf(trap);\n    if (trapIndex !== -1) {\n      trapStack.splice(trapIndex, 1);\n    }\n    if (trapStack.length > 0 && !trapStack[trapStack.length - 1]._isManuallyPaused()) {\n      trapStack[trapStack.length - 1]._setPausedState(false);\n    }\n  }\n};\nvar isSelectableInput = function isSelectableInput(node) {\n  return node.tagName && node.tagName.toLowerCase() === 'input' && typeof node.select === 'function';\n};\nvar isEscapeEvent = function isEscapeEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Escape' || (e === null || e === void 0 ? void 0 : e.key) === 'Esc' || (e === null || e === void 0 ? void 0 : e.keyCode) === 27;\n};\nvar isTabEvent = function isTabEvent(e) {\n  return (e === null || e === void 0 ? void 0 : e.key) === 'Tab' || (e === null || e === void 0 ? void 0 : e.keyCode) === 9;\n};\n\n// checks for TAB by default\nvar isKeyForward = function isKeyForward(e) {\n  return isTabEvent(e) && !e.shiftKey;\n};\n\n// checks for SHIFT+TAB by default\nvar isKeyBackward = function isKeyBackward(e) {\n  return isTabEvent(e) && e.shiftKey;\n};\nvar delay = function delay(fn) {\n  return setTimeout(fn, 0);\n};\n\n/**\n * Get an option's value when it could be a plain value, or a handler that provides\n *  the value.\n * @param {*} value Option's value to check.\n * @param {...*} [params] Any parameters to pass to the handler, if `value` is a function.\n * @returns {*} The `value`, or the handler's returned value.\n */\nvar valueOrHandler = function valueOrHandler(value) {\n  for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    params[_key - 1] = arguments[_key];\n  }\n  return typeof value === 'function' ? value.apply(void 0, params) : value;\n};\nvar getActualTarget = function getActualTarget(event) {\n  // NOTE: If the trap is _inside_ a shadow DOM, event.target will always be the\n  //  shadow host. However, event.target.composedPath() will be an array of\n  //  nodes \"clicked\" from inner-most (the actual element inside the shadow) to\n  //  outer-most (the host HTML document). If we have access to composedPath(),\n  //  then use its first element; otherwise, fall back to event.target (and\n  //  this only works for an _open_ shadow DOM; otherwise,\n  //  composedPath()[0] === event.target always).\n  return event.target.shadowRoot && typeof event.composedPath === 'function' ? event.composedPath()[0] : event.target;\n};\n\n// NOTE: this must be _outside_ `createFocusTrap()` to make sure all traps in this\n//  current instance use the same stack if `userOptions.trapStack` isn't specified\nvar internalTrapStack = [];\nvar createFocusTrap = function createFocusTrap(elements, userOptions) {\n  // SSR: a live trap shouldn't be created in this type of environment so this\n  //  should be safe code to execute if the `document` option isn't specified\n  var doc = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.document) || document;\n  var trapStack = (userOptions === null || userOptions === void 0 ? void 0 : userOptions.trapStack) || internalTrapStack;\n  var config = _objectSpread2({\n    returnFocusOnDeactivate: true,\n    escapeDeactivates: true,\n    delayInitialFocus: true,\n    isKeyForward: isKeyForward,\n    isKeyBackward: isKeyBackward\n  }, userOptions);\n  var state = {\n    // containers given to createFocusTrap()\n    // @type {Array<HTMLElement>}\n    containers: [],\n    // list of objects identifying tabbable nodes in `containers` in the trap\n    // NOTE: it's possible that a group has no tabbable nodes if nodes get removed while the trap\n    //  is active, but the trap should never get to a state where there isn't at least one group\n    //  with at least one tabbable node in it (that would lead to an error condition that would\n    //  result in an error being thrown)\n    // @type {Array<{\n    //   container: HTMLElement,\n    //   tabbableNodes: Array<HTMLElement>, // empty if none\n    //   focusableNodes: Array<HTMLElement>, // empty if none\n    //   posTabIndexesFound: boolean,\n    //   firstTabbableNode: HTMLElement|undefined,\n    //   lastTabbableNode: HTMLElement|undefined,\n    //   firstDomTabbableNode: HTMLElement|undefined,\n    //   lastDomTabbableNode: HTMLElement|undefined,\n    //   nextTabbableNode: (node: HTMLElement, forward: boolean) => HTMLElement|undefined\n    // }>}\n    containerGroups: [],\n    // same order/length as `containers` list\n\n    // references to objects in `containerGroups`, but only those that actually have\n    //  tabbable nodes in them\n    // NOTE: same order as `containers` and `containerGroups`, but __not necessarily__\n    //  the same length\n    tabbableGroups: [],\n    nodeFocusedBeforeActivation: null,\n    mostRecentlyFocusedNode: null,\n    active: false,\n    paused: false,\n    manuallyPaused: false,\n    // timer ID for when delayInitialFocus is true and initial focus in this trap\n    //  has been delayed during activation\n    delayInitialFocusTimer: undefined,\n    // the most recent KeyboardEvent for the configured nav key (typically [SHIFT+]TAB), if any\n    recentNavEvent: undefined\n  };\n  var trap; // eslint-disable-line prefer-const -- some private functions reference it, and its methods reference private functions, so we must declare here and define later\n\n  /**\n   * Gets a configuration option value.\n   * @param {Object|undefined} configOverrideOptions If true, and option is defined in this set,\n   *  value will be taken from this object. Otherwise, value will be taken from base configuration.\n   * @param {string} optionName Name of the option whose value is sought.\n   * @param {string|undefined} [configOptionName] Name of option to use __instead of__ `optionName`\n   *  IIF `configOverrideOptions` is not defined. Otherwise, `optionName` is used.\n   */\n  var getOption = function getOption(configOverrideOptions, optionName, configOptionName) {\n    return configOverrideOptions && configOverrideOptions[optionName] !== undefined ? configOverrideOptions[optionName] : config[configOptionName || optionName];\n  };\n\n  /**\n   * Finds the index of the container that contains the element.\n   * @param {HTMLElement} element\n   * @param {Event} [event] If available, and `element` isn't directly found in any container,\n   *  the event's composed path is used to see if includes any known trap containers in the\n   *  case where the element is inside a Shadow DOM.\n   * @returns {number} Index of the container in either `state.containers` or\n   *  `state.containerGroups` (the order/length of these lists are the same); -1\n   *  if the element isn't found.\n   */\n  var findContainerIndex = function findContainerIndex(element, event) {\n    var composedPath = typeof (event === null || event === void 0 ? void 0 : event.composedPath) === 'function' ? event.composedPath() : undefined;\n    // NOTE: search `containerGroups` because it's possible a group contains no tabbable\n    //  nodes, but still contains focusable nodes (e.g. if they all have `tabindex=-1`)\n    //  and we still need to find the element in there\n    return state.containerGroups.findIndex(function (_ref) {\n      var container = _ref.container,\n        tabbableNodes = _ref.tabbableNodes;\n      return container.contains(element) || (// fall back to explicit tabbable search which will take into consideration any\n      //  web components if the `tabbableOptions.getShadowRoot` option was used for\n      //  the trap, enabling shadow DOM support in tabbable (`Node.contains()` doesn't\n      //  look inside web components even if open)\n      composedPath === null || composedPath === void 0 ? void 0 : composedPath.includes(container)) || tabbableNodes.find(function (node) {\n        return node === element;\n      });\n    });\n  };\n\n  /**\n   * Gets the node for the given option, which is expected to be an option that\n   *  can be either a DOM node, a string that is a selector to get a node, `false`\n   *  (if a node is explicitly NOT given), or a function that returns any of these\n   *  values.\n   * @param {string} optionName\n   * @param {Object} options\n   * @param {boolean} [options.hasFallback] True if the option could be a selector string\n   *  and the option allows for a fallback scenario in the case where the selector is\n   *  valid but does not match a node (i.e. the queried node doesn't exist in the DOM).\n   * @param {Array} [options.params] Params to pass to the option if it's a function.\n   * @returns {undefined | null | false | HTMLElement | SVGElement} Returns\n   *  `undefined` if the option is not specified; `null` if the option didn't resolve\n   *  to a node but `options.hasFallback=true`, `false` if the option resolved to `false`\n   *  (node explicitly not given); otherwise, the resolved DOM node.\n   * @throws {Error} If the option is set, not `false`, and is not, or does not\n   *  resolve to a node, unless the option is a selector string and `options.hasFallback=true`.\n   */\n  var getNodeForOption = function getNodeForOption(optionName) {\n    var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$hasFallback = _ref2.hasFallback,\n      hasFallback = _ref2$hasFallback === void 0 ? false : _ref2$hasFallback,\n      _ref2$params = _ref2.params,\n      params = _ref2$params === void 0 ? [] : _ref2$params;\n    var optionValue = config[optionName];\n    if (typeof optionValue === 'function') {\n      optionValue = optionValue.apply(void 0, _toConsumableArray(params));\n    }\n    if (optionValue === true) {\n      optionValue = undefined; // use default value\n    }\n    if (!optionValue) {\n      if (optionValue === undefined || optionValue === false) {\n        return optionValue;\n      }\n      // else, empty string (invalid), null (invalid), 0 (invalid)\n\n      throw new Error(\"`\".concat(optionName, \"` was specified but was not a node, or did not return a node\"));\n    }\n    var node = optionValue; // could be HTMLElement, SVGElement, or non-empty string at this point\n\n    if (typeof optionValue === 'string') {\n      try {\n        node = doc.querySelector(optionValue); // resolve to node, or null if fails\n      } catch (err) {\n        throw new Error(\"`\".concat(optionName, \"` appears to be an invalid selector; error=\\\"\").concat(err.message, \"\\\"\"));\n      }\n      if (!node) {\n        if (!hasFallback) {\n          throw new Error(\"`\".concat(optionName, \"` as selector refers to no known node\"));\n        }\n        // else, `node` MUST be `null` because that's what `Document.querySelector()` returns\n        //  if the selector is valid but doesn't match anything\n      }\n    }\n    return node;\n  };\n  var getInitialFocusNode = function getInitialFocusNode() {\n    var node = getNodeForOption('initialFocus', {\n      hasFallback: true\n    });\n\n    // false explicitly indicates we want no initialFocus at all\n    if (node === false) {\n      return false;\n    }\n    if (node === undefined || node && !isFocusable(node, config.tabbableOptions)) {\n      // option not specified nor focusable: use fallback options\n      if (findContainerIndex(doc.activeElement) >= 0) {\n        node = doc.activeElement;\n      } else {\n        var firstTabbableGroup = state.tabbableGroups[0];\n        var firstTabbableNode = firstTabbableGroup && firstTabbableGroup.firstTabbableNode;\n\n        // NOTE: `fallbackFocus` option function cannot return `false` (not supported)\n        node = firstTabbableNode || getNodeForOption('fallbackFocus');\n      }\n    } else if (node === null) {\n      // option is a VALID selector string that doesn't yield a node: use the `fallbackFocus`\n      //  option instead of the default behavior when the option isn't specified at all\n      node = getNodeForOption('fallbackFocus');\n    }\n    if (!node) {\n      throw new Error('Your focus-trap needs to have at least one focusable element');\n    }\n    return node;\n  };\n  var updateTabbableNodes = function updateTabbableNodes() {\n    state.containerGroups = state.containers.map(function (container) {\n      var tabbableNodes = tabbable(container, config.tabbableOptions);\n\n      // NOTE: if we have tabbable nodes, we must have focusable nodes; focusable nodes\n      //  are a superset of tabbable nodes since nodes with negative `tabindex` attributes\n      //  are focusable but not tabbable\n      var focusableNodes = focusable(container, config.tabbableOptions);\n      var firstTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[0] : undefined;\n      var lastTabbableNode = tabbableNodes.length > 0 ? tabbableNodes[tabbableNodes.length - 1] : undefined;\n      var firstDomTabbableNode = focusableNodes.find(function (node) {\n        return isTabbable(node);\n      });\n      var lastDomTabbableNode = focusableNodes.slice().reverse().find(function (node) {\n        return isTabbable(node);\n      });\n      var posTabIndexesFound = !!tabbableNodes.find(function (node) {\n        return getTabIndex(node) > 0;\n      });\n      return {\n        container: container,\n        tabbableNodes: tabbableNodes,\n        focusableNodes: focusableNodes,\n        /** True if at least one node with positive `tabindex` was found in this container. */\n        posTabIndexesFound: posTabIndexesFound,\n        /** First tabbable node in container, __tabindex__ order; `undefined` if none. */\n        firstTabbableNode: firstTabbableNode,\n        /** Last tabbable node in container, __tabindex__ order; `undefined` if none. */\n        lastTabbableNode: lastTabbableNode,\n        // NOTE: DOM order is NOT NECESSARILY \"document position\" order, but figuring that out\n        //  would require more than just https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n        //  because that API doesn't work with Shadow DOM as well as it should (@see\n        //  https://github.com/whatwg/dom/issues/320) and since this first/last is only needed, so far,\n        //  to address an edge case related to positive tabindex support, this seems like a much easier,\n        //  \"close enough most of the time\" alternative for positive tabindexes which should generally\n        //  be avoided anyway...\n        /** First tabbable node in container, __DOM__ order; `undefined` if none. */\n        firstDomTabbableNode: firstDomTabbableNode,\n        /** Last tabbable node in container, __DOM__ order; `undefined` if none. */\n        lastDomTabbableNode: lastDomTabbableNode,\n        /**\n         * Finds the __tabbable__ node that follows the given node in the specified direction,\n         *  in this container, if any.\n         * @param {HTMLElement} node\n         * @param {boolean} [forward] True if going in forward tab order; false if going\n         *  in reverse.\n         * @returns {HTMLElement|undefined} The next tabbable node, if any.\n         */\n        nextTabbableNode: function nextTabbableNode(node) {\n          var forward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n          var nodeIdx = tabbableNodes.indexOf(node);\n          if (nodeIdx < 0) {\n            // either not tabbable nor focusable, or was focused but not tabbable (negative tabindex):\n            //  since `node` should at least have been focusable, we assume that's the case and mimic\n            //  what browsers do, which is set focus to the next node in __document position order__,\n            //  regardless of positive tabindexes, if any -- and for reasons explained in the NOTE\n            //  above related to `firstDomTabbable` and `lastDomTabbable` properties, we fall back to\n            //  basic DOM order\n            if (forward) {\n              return focusableNodes.slice(focusableNodes.indexOf(node) + 1).find(function (el) {\n                return isTabbable(el);\n              });\n            }\n            return focusableNodes.slice(0, focusableNodes.indexOf(node)).reverse().find(function (el) {\n              return isTabbable(el);\n            });\n          }\n          return tabbableNodes[nodeIdx + (forward ? 1 : -1)];\n        }\n      };\n    });\n    state.tabbableGroups = state.containerGroups.filter(function (group) {\n      return group.tabbableNodes.length > 0;\n    });\n\n    // throw if no groups have tabbable nodes and we don't have a fallback focus node either\n    if (state.tabbableGroups.length <= 0 && !getNodeForOption('fallbackFocus') // returning false not supported for this option\n    ) {\n      throw new Error('Your focus-trap must have at least one container with at least one tabbable node in it at all times');\n    }\n\n    // NOTE: Positive tabindexes are only properly supported in single-container traps because\n    //  doing it across multiple containers where tabindexes could be all over the place\n    //  would require Tabbable to support multiple containers, would require additional\n    //  specialized Shadow DOM support, and would require Tabbable's multi-container support\n    //  to look at those containers in document position order rather than user-provided\n    //  order (as they are treated in Focus-trap, for legacy reasons). See discussion on\n    //  https://github.com/focus-trap/focus-trap/issues/375 for more details.\n    if (state.containerGroups.find(function (g) {\n      return g.posTabIndexesFound;\n    }) && state.containerGroups.length > 1) {\n      throw new Error(\"At least one node with a positive tabindex was found in one of your focus-trap's multiple containers. Positive tabindexes are only supported in single-container focus-traps.\");\n    }\n  };\n\n  /**\n   * Gets the current activeElement. If it's a web-component and has open shadow-root\n   * it will recursively search inside shadow roots for the \"true\" activeElement.\n   *\n   * @param {Document | ShadowRoot} el\n   *\n   * @returns {HTMLElement} The element that currently has the focus\n   **/\n  var _getActiveElement = function getActiveElement(el) {\n    var activeElement = el.activeElement;\n    if (!activeElement) {\n      return;\n    }\n    if (activeElement.shadowRoot && activeElement.shadowRoot.activeElement !== null) {\n      return _getActiveElement(activeElement.shadowRoot);\n    }\n    return activeElement;\n  };\n  var _tryFocus = function tryFocus(node) {\n    if (node === false) {\n      return;\n    }\n    if (node === _getActiveElement(document)) {\n      return;\n    }\n    if (!node || !node.focus) {\n      _tryFocus(getInitialFocusNode());\n      return;\n    }\n    node.focus({\n      preventScroll: !!config.preventScroll\n    });\n    // NOTE: focus() API does not trigger focusIn event so set MRU node manually\n    state.mostRecentlyFocusedNode = node;\n    if (isSelectableInput(node)) {\n      node.select();\n    }\n  };\n  var getReturnFocusNode = function getReturnFocusNode(previousActiveElement) {\n    var node = getNodeForOption('setReturnFocus', {\n      params: [previousActiveElement]\n    });\n    return node ? node : node === false ? false : previousActiveElement;\n  };\n\n  /**\n   * Finds the next node (in either direction) where focus should move according to a\n   *  keyboard focus-in event.\n   * @param {Object} params\n   * @param {Node} [params.target] Known target __from which__ to navigate, if any.\n   * @param {KeyboardEvent|FocusEvent} [params.event] Event to use if `target` isn't known (event\n   *  will be used to determine the `target`). Ignored if `target` is specified.\n   * @param {boolean} [params.isBackward] True if focus should move backward.\n   * @returns {Node|undefined} The next node, or `undefined` if a next node couldn't be\n   *  determined given the current state of the trap.\n   */\n  var findNextNavNode = function findNextNavNode(_ref3) {\n    var target = _ref3.target,\n      event = _ref3.event,\n      _ref3$isBackward = _ref3.isBackward,\n      isBackward = _ref3$isBackward === void 0 ? false : _ref3$isBackward;\n    target = target || getActualTarget(event);\n    updateTabbableNodes();\n    var destinationNode = null;\n    if (state.tabbableGroups.length > 0) {\n      // make sure the target is actually contained in a group\n      // NOTE: the target may also be the container itself if it's focusable\n      //  with tabIndex='-1' and was given initial focus\n      var containerIndex = findContainerIndex(target, event);\n      var containerGroup = containerIndex >= 0 ? state.containerGroups[containerIndex] : undefined;\n      if (containerIndex < 0) {\n        // target not found in any group: quite possible focus has escaped the trap,\n        //  so bring it back into...\n        if (isBackward) {\n          // ...the last node in the last group\n          destinationNode = state.tabbableGroups[state.tabbableGroups.length - 1].lastTabbableNode;\n        } else {\n          // ...the first node in the first group\n          destinationNode = state.tabbableGroups[0].firstTabbableNode;\n        }\n      } else if (isBackward) {\n        // REVERSE\n\n        // is the target the first tabbable node in a group?\n        var startOfGroupIndex = state.tabbableGroups.findIndex(function (_ref4) {\n          var firstTabbableNode = _ref4.firstTabbableNode;\n          return target === firstTabbableNode;\n        });\n        if (startOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target, false))) {\n          // an exception case where the target is either the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle shift+tab as if focus were on the container's\n          //  first tabbable node, and go to the last tabbable node of the LAST group\n          startOfGroupIndex = containerIndex;\n        }\n        if (startOfGroupIndex >= 0) {\n          // YES: then shift+tab should go to the last tabbable node in the\n          //  previous group (and wrap around to the last tabbable node of\n          //  the LAST group if it's the first tabbable node of the FIRST group)\n          var destinationGroupIndex = startOfGroupIndex === 0 ? state.tabbableGroups.length - 1 : startOfGroupIndex - 1;\n          var destinationGroup = state.tabbableGroups[destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? destinationGroup.lastTabbableNode : destinationGroup.lastDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target, false);\n        }\n      } else {\n        // FORWARD\n\n        // is the target the last tabbable node in a group?\n        var lastOfGroupIndex = state.tabbableGroups.findIndex(function (_ref5) {\n          var lastTabbableNode = _ref5.lastTabbableNode;\n          return target === lastTabbableNode;\n        });\n        if (lastOfGroupIndex < 0 && (containerGroup.container === target || isFocusable(target, config.tabbableOptions) && !isTabbable(target, config.tabbableOptions) && !containerGroup.nextTabbableNode(target))) {\n          // an exception case where the target is the container itself, or\n          //  a non-tabbable node that was given focus (i.e. tabindex is negative\n          //  and user clicked on it or node was programmatically given focus)\n          //  and is not followed by any other tabbable node, in which\n          //  case, we should handle tab as if focus were on the container's\n          //  last tabbable node, and go to the first tabbable node of the FIRST group\n          lastOfGroupIndex = containerIndex;\n        }\n        if (lastOfGroupIndex >= 0) {\n          // YES: then tab should go to the first tabbable node in the next\n          //  group (and wrap around to the first tabbable node of the FIRST\n          //  group if it's the last tabbable node of the LAST group)\n          var _destinationGroupIndex = lastOfGroupIndex === state.tabbableGroups.length - 1 ? 0 : lastOfGroupIndex + 1;\n          var _destinationGroup = state.tabbableGroups[_destinationGroupIndex];\n          destinationNode = getTabIndex(target) >= 0 ? _destinationGroup.firstTabbableNode : _destinationGroup.firstDomTabbableNode;\n        } else if (!isTabEvent(event)) {\n          // user must have customized the nav keys so we have to move focus manually _within_\n          //  the active group: do this based on the order determined by tabbable()\n          destinationNode = containerGroup.nextTabbableNode(target);\n        }\n      }\n    } else {\n      // no groups available\n      // NOTE: the fallbackFocus option does not support returning false to opt-out\n      destinationNode = getNodeForOption('fallbackFocus');\n    }\n    return destinationNode;\n  };\n\n  // This needs to be done on mousedown and touchstart instead of click\n  // so that it precedes the focus event.\n  var checkPointerDown = function checkPointerDown(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      // allow the click since it ocurred inside the trap\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      // immediately deactivate the trap\n      trap.deactivate({\n        // NOTE: by setting `returnFocus: false`, deactivate() will do nothing,\n        //  which will result in the outside click setting focus to the node\n        //  that was clicked (and if not focusable, to \"nothing\"); by setting\n        //  `returnFocus: true`, we'll attempt to re-focus the node originally-focused\n        //  on activation (or the configured `setReturnFocus` node), whether the\n        //  outside click was on a focusable node or not\n        returnFocus: config.returnFocusOnDeactivate\n      });\n      return;\n    }\n\n    // This is needed for mobile devices.\n    // (If we'll only let `click` events through,\n    // then on mobile they will be blocked anyways if `touchstart` is blocked.)\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      // allow the click outside the trap to take place\n      return;\n    }\n\n    // otherwise, prevent the click\n    e.preventDefault();\n  };\n\n  // In case focus escapes the trap for some strange reason, pull it back in.\n  // NOTE: the focusIn event is NOT cancelable, so if focus escapes, it may cause unexpected\n  //  scrolling if the node that got focused was out of view; there's nothing we can do to\n  //  prevent that from happening by the time we discover that focus escaped\n  var checkFocusIn = function checkFocusIn(event) {\n    var target = getActualTarget(event);\n    var targetContained = findContainerIndex(target, event) >= 0;\n\n    // In Firefox when you Tab out of an iframe the Document is briefly focused.\n    if (targetContained || target instanceof Document) {\n      if (targetContained) {\n        state.mostRecentlyFocusedNode = target;\n      }\n    } else {\n      // escaped! pull it back in to where it just left\n      event.stopImmediatePropagation();\n\n      // focus will escape if the MRU node had a positive tab index and user tried to nav forward;\n      //  it will also escape if the MRU node had a 0 tab index and user tried to nav backward\n      //  toward a node with a positive tab index\n      var nextNode; // next node to focus, if we find one\n      var navAcrossContainers = true;\n      if (state.mostRecentlyFocusedNode) {\n        if (getTabIndex(state.mostRecentlyFocusedNode) > 0) {\n          // MRU container index must be >=0 otherwise we wouldn't have it as an MRU node...\n          var mruContainerIdx = findContainerIndex(state.mostRecentlyFocusedNode);\n          // there MAY not be any tabbable nodes in the container if there are at least 2 containers\n          //  and the MRU node is focusable but not tabbable (focus-trap requires at least 1 container\n          //  with at least one tabbable node in order to function, so this could be the other container\n          //  with nothing tabbable in it)\n          var tabbableNodes = state.containerGroups[mruContainerIdx].tabbableNodes;\n          if (tabbableNodes.length > 0) {\n            // MRU tab index MAY not be found if the MRU node is focusable but not tabbable\n            var mruTabIdx = tabbableNodes.findIndex(function (node) {\n              return node === state.mostRecentlyFocusedNode;\n            });\n            if (mruTabIdx >= 0) {\n              if (config.isKeyForward(state.recentNavEvent)) {\n                if (mruTabIdx + 1 < tabbableNodes.length) {\n                  nextNode = tabbableNodes[mruTabIdx + 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              } else {\n                if (mruTabIdx - 1 >= 0) {\n                  nextNode = tabbableNodes[mruTabIdx - 1];\n                  navAcrossContainers = false;\n                }\n                // else, don't wrap within the container as focus should move to next/previous\n                //  container\n              }\n              // else, don't find in container order without considering direction too\n            }\n          }\n          // else, no tabbable nodes in that container (which means we must have at least one other\n          //  container with at least one tabbable node in it, otherwise focus-trap would've thrown\n          //  an error the last time updateTabbableNodes() was run): find next node among all known\n          //  containers\n        } else {\n          // check to see if there's at least one tabbable node with a positive tab index inside\n          //  the trap because focus seems to escape when navigating backward from a tabbable node\n          //  with tabindex=0 when this is the case (instead of wrapping to the tabbable node with\n          //  the greatest positive tab index like it should)\n          if (!state.containerGroups.some(function (g) {\n            return g.tabbableNodes.some(function (n) {\n              return getTabIndex(n) > 0;\n            });\n          })) {\n            // no containers with tabbable nodes with positive tab indexes which means the focus\n            //  escaped for some other reason and we should just execute the fallback to the\n            //  MRU node or initial focus node, if any\n            navAcrossContainers = false;\n          }\n        }\n      } else {\n        // no MRU node means we're likely in some initial condition when the trap has just\n        //  been activated and initial focus hasn't been given yet, in which case we should\n        //  fall through to trying to focus the initial focus node, which is what should\n        //  happen below at this point in the logic\n        navAcrossContainers = false;\n      }\n      if (navAcrossContainers) {\n        nextNode = findNextNavNode({\n          // move FROM the MRU node, not event-related node (which will be the node that is\n          //  outside the trap causing the focus escape we're trying to fix)\n          target: state.mostRecentlyFocusedNode,\n          isBackward: config.isKeyBackward(state.recentNavEvent)\n        });\n      }\n      if (nextNode) {\n        _tryFocus(nextNode);\n      } else {\n        _tryFocus(state.mostRecentlyFocusedNode || getInitialFocusNode());\n      }\n    }\n    state.recentNavEvent = undefined; // clear\n  };\n\n  // Hijack key nav events on the first and last focusable nodes of the trap,\n  // in order to prevent focus from escaping. If it escapes for even a\n  // moment it can end up scrolling the page and causing confusion so we\n  // kind of need to capture the action at the keydown phase.\n  var checkKeyNav = function checkKeyNav(event) {\n    var isBackward = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    state.recentNavEvent = event;\n    var destinationNode = findNextNavNode({\n      event: event,\n      isBackward: isBackward\n    });\n    if (destinationNode) {\n      if (isTabEvent(event)) {\n        // since tab natively moves focus, we wouldn't have a destination node unless we\n        //  were on the edge of a container and had to move to the next/previous edge, in\n        //  which case we want to prevent default to keep the browser from moving focus\n        //  to where it normally would\n        event.preventDefault();\n      }\n      _tryFocus(destinationNode);\n    }\n    // else, let the browser take care of [shift+]tab and move the focus\n  };\n  var checkTabKey = function checkTabKey(event) {\n    if (config.isKeyForward(event) || config.isKeyBackward(event)) {\n      checkKeyNav(event, config.isKeyBackward(event));\n    }\n  };\n\n  // we use a different event phase for the Escape key to allow canceling the event and checking for this in escapeDeactivates\n  var checkEscapeKey = function checkEscapeKey(event) {\n    if (isEscapeEvent(event) && valueOrHandler(config.escapeDeactivates, event) !== false) {\n      event.preventDefault();\n      trap.deactivate();\n    }\n  };\n  var checkClick = function checkClick(e) {\n    var target = getActualTarget(e);\n    if (findContainerIndex(target, e) >= 0) {\n      return;\n    }\n    if (valueOrHandler(config.clickOutsideDeactivates, e)) {\n      return;\n    }\n    if (valueOrHandler(config.allowOutsideClick, e)) {\n      return;\n    }\n    e.preventDefault();\n    e.stopImmediatePropagation();\n  };\n\n  //\n  // EVENT LISTENERS\n  //\n\n  var addListeners = function addListeners() {\n    if (!state.active) {\n      return;\n    }\n\n    // There can be only one listening focus trap at a time\n    activeFocusTraps.activateTrap(trapStack, trap);\n\n    // Delay ensures that the focused element doesn't capture the event\n    // that caused the focus trap activation.\n    state.delayInitialFocusTimer = config.delayInitialFocus ? delay(function () {\n      _tryFocus(getInitialFocusNode());\n    }) : _tryFocus(getInitialFocusNode());\n    doc.addEventListener('focusin', checkFocusIn, true);\n    doc.addEventListener('mousedown', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('touchstart', checkPointerDown, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('click', checkClick, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkTabKey, {\n      capture: true,\n      passive: false\n    });\n    doc.addEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n  var removeListeners = function removeListeners() {\n    if (!state.active) {\n      return;\n    }\n    doc.removeEventListener('focusin', checkFocusIn, true);\n    doc.removeEventListener('mousedown', checkPointerDown, true);\n    doc.removeEventListener('touchstart', checkPointerDown, true);\n    doc.removeEventListener('click', checkClick, true);\n    doc.removeEventListener('keydown', checkTabKey, true);\n    doc.removeEventListener('keydown', checkEscapeKey);\n    return trap;\n  };\n\n  //\n  // MUTATION OBSERVER\n  //\n\n  var checkDomRemoval = function checkDomRemoval(mutations) {\n    var isFocusedNodeRemoved = mutations.some(function (mutation) {\n      var removedNodes = Array.from(mutation.removedNodes);\n      return removedNodes.some(function (node) {\n        return node === state.mostRecentlyFocusedNode;\n      });\n    });\n\n    // If the currently focused is removed then browsers will move focus to the\n    // <body> element. If this happens, try to move focus back into the trap.\n    if (isFocusedNodeRemoved) {\n      _tryFocus(getInitialFocusNode());\n    }\n  };\n\n  // Use MutationObserver - if supported - to detect if focused node is removed\n  // from the DOM.\n  var mutationObserver = typeof window !== 'undefined' && 'MutationObserver' in window ? new MutationObserver(checkDomRemoval) : undefined;\n  var updateObservedNodes = function updateObservedNodes() {\n    if (!mutationObserver) {\n      return;\n    }\n    mutationObserver.disconnect();\n    if (state.active && !state.paused) {\n      state.containers.map(function (container) {\n        mutationObserver.observe(container, {\n          subtree: true,\n          childList: true\n        });\n      });\n    }\n  };\n\n  //\n  // TRAP DEFINITION\n  //\n\n  trap = {\n    get active() {\n      return state.active;\n    },\n    get paused() {\n      return state.paused;\n    },\n    activate: function activate(activateOptions) {\n      if (state.active) {\n        return this;\n      }\n      var onActivate = getOption(activateOptions, 'onActivate');\n      var onPostActivate = getOption(activateOptions, 'onPostActivate');\n      var checkCanFocusTrap = getOption(activateOptions, 'checkCanFocusTrap');\n      if (!checkCanFocusTrap) {\n        updateTabbableNodes();\n      }\n      state.active = true;\n      state.paused = false;\n      state.nodeFocusedBeforeActivation = _getActiveElement(doc);\n      onActivate === null || onActivate === void 0 || onActivate();\n      var finishActivation = function finishActivation() {\n        if (checkCanFocusTrap) {\n          updateTabbableNodes();\n        }\n        addListeners();\n        updateObservedNodes();\n        onPostActivate === null || onPostActivate === void 0 || onPostActivate();\n      };\n      if (checkCanFocusTrap) {\n        checkCanFocusTrap(state.containers.concat()).then(finishActivation, finishActivation);\n        return this;\n      }\n      finishActivation();\n      return this;\n    },\n    deactivate: function deactivate(deactivateOptions) {\n      if (!state.active) {\n        return this;\n      }\n      var options = _objectSpread2({\n        onDeactivate: config.onDeactivate,\n        onPostDeactivate: config.onPostDeactivate,\n        checkCanReturnFocus: config.checkCanReturnFocus\n      }, deactivateOptions);\n      clearTimeout(state.delayInitialFocusTimer); // noop if undefined\n      state.delayInitialFocusTimer = undefined;\n      removeListeners();\n      state.active = false;\n      state.paused = false;\n      updateObservedNodes();\n      activeFocusTraps.deactivateTrap(trapStack, trap);\n      var onDeactivate = getOption(options, 'onDeactivate');\n      var onPostDeactivate = getOption(options, 'onPostDeactivate');\n      var checkCanReturnFocus = getOption(options, 'checkCanReturnFocus');\n      var returnFocus = getOption(options, 'returnFocus', 'returnFocusOnDeactivate');\n      onDeactivate === null || onDeactivate === void 0 || onDeactivate();\n      var finishDeactivation = function finishDeactivation() {\n        delay(function () {\n          if (returnFocus) {\n            _tryFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation));\n          }\n          onPostDeactivate === null || onPostDeactivate === void 0 || onPostDeactivate();\n        });\n      };\n      if (returnFocus && checkCanReturnFocus) {\n        checkCanReturnFocus(getReturnFocusNode(state.nodeFocusedBeforeActivation)).then(finishDeactivation, finishDeactivation);\n        return this;\n      }\n      finishDeactivation();\n      return this;\n    },\n    pause: function pause(pauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = true;\n      return this._setPausedState(true, pauseOptions);\n    },\n    unpause: function unpause(unpauseOptions) {\n      if (!state.active) {\n        return this;\n      }\n      state.manuallyPaused = false;\n      if (trapStack[trapStack.length - 1] !== this) {\n        return this;\n      }\n      return this._setPausedState(false, unpauseOptions);\n    },\n    updateContainerElements: function updateContainerElements(containerElements) {\n      var elementsAsArray = [].concat(containerElements).filter(Boolean);\n      state.containers = elementsAsArray.map(function (element) {\n        return typeof element === 'string' ? doc.querySelector(element) : element;\n      });\n      if (state.active) {\n        updateTabbableNodes();\n      }\n      updateObservedNodes();\n      return this;\n    }\n  };\n  Object.defineProperties(trap, {\n    _isManuallyPaused: {\n      value: function value() {\n        return state.manuallyPaused;\n      }\n    },\n    _setPausedState: {\n      value: function value(paused, options) {\n        if (state.paused === paused) {\n          return this;\n        }\n        state.paused = paused;\n        if (paused) {\n          var onPause = getOption(options, 'onPause');\n          var onPostPause = getOption(options, 'onPostPause');\n          onPause === null || onPause === void 0 || onPause();\n          removeListeners();\n          updateObservedNodes();\n          onPostPause === null || onPostPause === void 0 || onPostPause();\n        } else {\n          var onUnpause = getOption(options, 'onUnpause');\n          var onPostUnpause = getOption(options, 'onPostUnpause');\n          onUnpause === null || onUnpause === void 0 || onUnpause();\n          updateTabbableNodes();\n          addListeners();\n          updateObservedNodes();\n          onPostUnpause === null || onPostUnpause === void 0 || onPostUnpause();\n        }\n        return this;\n      }\n    }\n  });\n\n  // initialize container elements\n  trap.updateContainerElements(elements);\n  return trap;\n};\n\nexport { createFocusTrap };\n//# sourceMappingURL=focus-trap.esm.js.map\n","import { toArray, unrefElement, tryOnScopeDispose } from '@vueuse/core';\nimport { notNullish } from '@vueuse/shared';\nimport { createFocusTrap } from 'focus-trap';\nimport { shallowRef, computed, toValue, watch } from 'vue';\n\nfunction useFocusTrap(target, options = {}) {\n  let trap;\n  const { immediate, ...focusTrapOptions } = options;\n  const hasFocus = shallowRef(false);\n  const isPaused = shallowRef(false);\n  const activate = (opts) => trap && trap.activate(opts);\n  const deactivate = (opts) => trap && trap.deactivate(opts);\n  const pause = () => {\n    if (trap) {\n      trap.pause();\n      isPaused.value = true;\n    }\n  };\n  const unpause = () => {\n    if (trap) {\n      trap.unpause();\n      isPaused.value = false;\n    }\n  };\n  const targets = computed(() => {\n    const _targets = toValue(target);\n    return toArray(_targets).map((el) => {\n      const _el = toValue(el);\n      return typeof _el === \"string\" ? _el : unrefElement(_el);\n    }).filter(notNullish);\n  });\n  watch(\n    targets,\n    (els) => {\n      if (!els.length)\n        return;\n      trap = createFocusTrap(els, {\n        ...focusTrapOptions,\n        onActivate() {\n          hasFocus.value = true;\n          if (options.onActivate)\n            options.onActivate();\n        },\n        onDeactivate() {\n          hasFocus.value = false;\n          if (options.onDeactivate)\n            options.onDeactivate();\n        }\n      });\n      if (immediate)\n        activate();\n    },\n    { flush: \"post\" }\n  );\n  tryOnScopeDispose(() => deactivate());\n  return {\n    hasFocus,\n    isPaused,\n    activate,\n    deactivate,\n    pause,\n    unpause\n  };\n}\n\nexport { useFocusTrap };\n"],"x_google_ignoreList":[0,1,2],"mappings":"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"}